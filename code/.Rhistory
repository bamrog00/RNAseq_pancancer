z_scored_matrix_geneSig = t(apply(norm_counts_geneSig, 1, function(x) (x - mean(x)) / sd(x)))
sample_scores_geneSig = colSums(z_scored_matrix_geneSig)
colData$scoregeneSig = sample_scores_geneSig[rownames(colData)]
return(list(enough_genes, colData, gene_sign))
}
checkMode_n3 = function(colData){
## Function to check if there are at least one sample for each case in the n3 mode
## If not the n3 analyisis cannot be made
## Input:
## colData (dataframe): Dataframe containg information per sample (rows are samples and the columns are features/information)
## Output (boolean): Indicates if n3 mode analysis can be made
n_high = nrow(colData[colData['gmm_n3_cut'] == 'High',])
n_medium = nrow(colData[colData['gmm_n3_cut'] == 'Medium',])
n_low = nrow(colData[colData['gmm_n3_cut'] == 'Low',])
if (n_high == 0 | n_medium == 0 | n_low == 0){
return (FALSE)
}else
return(TRUE)
}
runSingleCohort = function(projectID){
## Runs the full analyiss on the given cohort
## Creates dds object (n2 and n3 if possible), creates volcano plot, runs GSEA, creates heatmaps, creates scores and heatmpas for scores
## Input:
## projectID (string): Cohortname with the project prefix like TCGA-LAUD
cancertype = strsplit(projectID,'-')[[1]]
if (length(cancertype) > 2){
cancertype = paste(cancertype[2],cancertype[3],sep = '-')
} else{
cancertype = cancertype[2]
}
### Get the data
data = loadData(cancertype)
print(paste('Loaded data from cohort ', projectID, sep = ''))
count_matrix = data[[1]]
colData = data[[2]]
n3_possible = checkMode_n3(colData)
### create both dds object for n2 and n3
dds_n2 = runDeSeq(count_matrix, colData, mode = 'n2')
print(paste('Created DeSeq Object for mode n2 for cohort ', projectID, sep = ''))
if (n3_possible){
dds_n3 = runDeSeq(count_matrix, colData, mode = 'n3')
print(paste('Created DeSeq Object for mode n3 for cohort ', projectID, sep = ''))
}else{
print(paste('One class (high,medium,low) had 0 number of samples. N3 analysis could not be done'))
}
### Run the analysis on the n2 and n3 data
runAnalysis(dds_n2, cancertype, mode = 'n2')
print(paste('Finished analysis for mode n2 for cohort ', projectID, sep = ''))
if (n3_possible){
runAnalysis(dds_n3, cancertype, mode = 'n3')
print(paste('Finished analysis for mode n3 for cohort ', projectID, sep = ''))
}
### Calculate the scores
colData_scores = getScores(dds_n2, colData)
results = createGeneSigScore(dds_n2, colData_scores, mode ='n2', min_genes = 5, max_genes = 200)
print(paste('Created scores for cohort ', projectID, sep = ''))
if (results[[1]]){
enough_geneSig = results[[1]]
colData_scores = results[[2]]
geneSig = results[[3]]
}else{
enough_geneSig = results[[1]]
colData_scores = results[[2]]
geneSig = list()
}
### Plot the scores as boxplot, in heatmap compared to HRR_70 genes and all scores together
plotScores_boxplot(colData_scores, cancertype, enough_geneSig)
print(paste('Plotted the score for cohort ', projectID, sep = ''))
createAll_heatmap_twoScores(dds_n2, colData_scores, mode = 'n2', annot_mode ='n2', cancertype, enough_geneSig, geneSig)
print(paste('Created heatmap for score comparison for cohort ', projectID, sep = ''))
heatmap_allScores(colData_scores, cancertype, mode = 'n2', annot_mode = 'n2', enough_geneSig, save_heat = TRUE)
print(paste('Created heatmap with all scores for cohort ', projectID, sep = ''))
print(paste('Finished cohort ', projectID, sep = ''))
#return(list(number_samples, number_samples_low_n2, number_samples_high_n2, number_samples_low_n3, number_samples_medium_n3, number_samples_high_n3))
}
runMultipleCohorts = function(cohortlist){
## Runs the analysis for all cohorts in the input list
## Input:
## cohortlist (list of strings): List containing the names of the cohorts with the project prefix like TCGA-LUAD
for (cohort in cohortlist){
runSingleCohort(cohort)
}
}
getStatisitcs = function(cohortlist, gmm_results){
## Gets the numbers for the cohorts including: number of casees, number of HRD-low cases with the n2 cutoff, number of HRD-High cases with the n2 cutoff,
## the n2 cutoff, the same for HRD-low, HRD-Medium and HRD-High for the n3 cutoff and the two n3 cutoffs. Saves the results in a csv file
## Input:
## cohortlist (list of strings): List containing the names of the cohorts with the project prefix like TCGA-LUAD
## gmm_results (dataframe): Results from the GMM, containg the n2 and the the two n3 cutoffs for each cohort (rows)
column_names = c('projectID', 'n_samples', 'n_HRD_low_n2', 'n_HRD_high_n2', 'n2_cutoff_lh','n_HRD_low_n3', 'n_HRD_medium_n3', 'n_HRD_high_n3','n3_cutoff_lm','n3_cutoff_mh')
summary_df = data.frame(matrix(ncol = length(column_names), nrow = 0))
colnames(summary_df) = column_names
for (cohort in cohortlist){
cancertype = strsplit(cohort,'-')[[1]]
if (length(cancertype) > 2){
cancertype = paste(cancertype[2],cancertype[3],sep = '-')
} else{
cancertype = cancertype[2]
}
data = loadData(cancertype)
colData = data[[2]]
number_samples = nrow(colData)
number_samples_high_n2 = nrow(colData[colData['gmm_n2_cut'] == 'High',])
number_samples_low_n2 = nrow(colData[colData['gmm_n2_cut'] == 'Low',])
number_samples_high_n3 = nrow(colData[colData['gmm_n3_cut'] == 'High',])
number_samples_low_n3 = nrow(colData[colData['gmm_n3_cut'] == 'Low',])
number_samples_medium_n3 = nrow(colData[colData['gmm_n3_cut'] == 'Medium',])
n2_cutoff_lh = gmm_results[gmm_results['Project.ID'] == cohort, 'n2_cutoff']
n3_cutoff_lm = gmm_results[gmm_results['Project.ID'] == cohort, 'n3_cutoff_lm']
n3_cutoff_mh = gmm_results[gmm_results['Project.ID'] == cohort, 'n3_cutoff_mh']
new_row <- data.frame(projectID = cohort, n_samples = number_samples, n_HRD_low_n2 = number_samples_low_n2, n_HRD_high_n2 = number_samples_high_n2, n2_cutoff_lh = n2_cutoff_lh, n_HRD_low_n3 = number_samples_low_n3, n_HRD_medium_n3 = number_samples_medium_n3, n_HRD_high_n3 = number_samples_high_n3, n3_cutoff_lm = n3_cutoff_lm, n3_cutoff_mh = n3_cutoff_mh)
summary_df = rbind(summary_df, new_row)
print(paste('Finished cohort ',cohort, sep = ''))
}
write.csv(summary_df, '../data/summary_number_samples.csv', row.names = FALSE)
}
createHRDGeneSigScore = function(dds, colData, mode, cancertype, min_genes, save_genes = FALSE){
## Function which extracts the most significant genes and creates a new score.
## Returns the genes and the colData with the new score
## Input:
## dds (dds object)
## colData (dataframe): Dataframe containg information per sample (rows are samples and the columns are features/information)
## min_genes (int): Minimum number of genes needed for the score
## max_genes (int): Maximum number of genes used for the score
## Output
## results[1] (boolean): Indicates if a score was made
## results[2] (dataframe): Dataframe containg information per sample (rows are samples and the columns are features/information) with the new score
## results[3] (list of strings): List of the significant genes use for the score (only if results[1] is TRUE)
enough_genes = FALSE
if (mode == 'n2'){
res = results(dds, contrast = c('gmm_n2_cut', 'High', 'Low'), alpha = 0.05)
}else{
res = results(dds, contrast = c('gmm_n3_cut', 'High', 'Low'), alpha = 0.05)
}
res_df = as.data.frame(res)
res_df = subset(res_df, rownames(res_df) %in% hrdgenes$gene)
### Extract the most significant genes
genes_significant = subset(res_df, res_df$padj<=0.05 )
genes_significant = subset(genes_significant, genes_significant$log2FoldChange>=0.58 | genes_significant$log2FoldChange<= -0.58 )
genes_significant = genes_significant[order(genes_significant$padj),]
if (length(gene_sign) < min_genes){
return(list(enough_genes, colData))
}
enough_genes = TRUE
### Create the new score
norm_counts = counts(dds, normalized = TRUE)
norm_counts_geneSig = norm_counts[rownames(norm_counts) %in% gene_sign,]
z_scored_matrix_geneSig = t(apply(norm_counts_geneSig, 1, function(x) (x - mean(x)) / sd(x)))
sample_scores_geneSig = colSums(z_scored_matrix_geneSig)
colData$scoreHRDgeneSig = sample_scores_geneSig[rownames(colData)]
if (save_genes){
genes_df = as.dataframe(gene_sign)
write.csv(genes_df, paste('../RNAseq_',cancertype,'/results/hrd_significant_genes_',mode,'.csv', sep = ''), row.names = FALSE)
}
return(list(enough_genes, colData, gene_sign))
}
newScoreRunSingleCohort = function(projectID){
cancertype = strsplit(projectID,'-')[[1]]
if (length(cancertype) > 2){
cancertype = paste(cancertype[2],cancertype[3],sep = '-')
} else{
cancertype = cancertype[2]
}
### Get the data
data = loadData(cancertype)
print(paste('Loaded data from cohort ', projectID, sep = ''))
count_matrix = data[[1]]
colData = data[[2]]
dds_n2 = runDeSeq(count_matrix, colData, mode = 'n2')
print(paste('Created DeSeq Object for mode n2 for cohort ', projectID, sep = ''))
colData_scores = getScores(dds_n2, colData)
results = createHRDGeneSigScore(dds_n2, colData_scores, mode ='n2', min_genes = 5, save_genes = TRUE)
print(paste('Created scores for cohort ', projectID, sep = ''))
if (results[[1]]){
enough_geneSig = results[[1]]
colData_scores = results[[2]]
geneSig = results[[3]]
}else{
enough_geneSig = results[[1]]
colData_scores = results[[2]]
geneSig = list()
}
### Plot the scores as boxplot, in heatmap compared to HRR_70 genes and all scores together
plotScores_boxplot_v2(colData_scores, cancertype, enough_geneSig)
print(paste('Plotted the score for cohort ', projectID, sep = ''))
createAll_heatmap_twoScores_v2(dds_n2, colData_scores, mode = 'n2', annot_mode ='n2', cancertype, enough_geneSig, geneSig)
print(paste('Created heatmap for score comparison for cohort ', projectID, sep = ''))
heatmap_allScores_v2(colData_scores, cancertype, mode = 'n2', annot_mode = 'n2', enough_geneSig, save_heat = TRUE)
print(paste('Created heatmap with all scores for cohort ', projectID, sep = ''))
print(paste('Finished cohort ', projectID, sep = ''))
}
newScoreRunMultipleCohort = function(cohortList){
for (cohort in cohortList){
newScoreRunSingleCohort(cohort)
}
}
plotScores_boxplot_v2 = function(colData, cancertype, hrdgeneSigScore){
## Function that creates and saves boxplots for each score showing the distribution of the HRD-type (high, medium, low) for each score.
## Input:
## colData (dataframe): Dataframe containg information per sample (rows are samples and the columns are features/information)
## cancertype (string): The cancertype has to be without the prefix like 'TCGA' or 'TARGET'
## geneSigScore (boolean): If true it means that this score is available and a boxplot can be created
comparisons = list( c('High', 'Low'), c('High', 'Medium'), c('Low', 'Medium'))
### create the different boxplots
bp_corr_score_HRD_HRR = ggplot(data = colData, aes(x = gmm_n3_cut, y = scoreHRR, fill = gmm_n3_cut)) +
geom_boxplot(show.legend = FALSE, notch = TRUE) +
stat_boxplot(geom='errorbar', linetype=1, width=0.5)+
xlab("HRD type") + stat_compare_means(comparisons = comparisons, method = 't.test')
bp_corr_score_HRD_CINSARC = ggplot(data = colData, aes(x = gmm_n3_cut, y = scoreCINSARC, fill = gmm_n3_cut)) +
geom_boxplot(show.legend = FALSE, notch = TRUE) +
stat_boxplot(geom='errorbar', linetype=1, width=0.5)+
xlab("HRD type") + stat_compare_means(comparisons = comparisons, method = 't.test')
bp_corr_score_HRD_MMEJ = ggplot(data = colData, aes(x = gmm_n3_cut, y = scoreMMEJ, fill = gmm_n3_cut)) +
geom_boxplot(show.legend = FALSE, notch = TRUE) +
stat_boxplot(geom='errorbar', linetype=1, width=0.5)+
xlab("HRD type") + stat_compare_means(comparisons = comparisons, method = 't.test')
bp_corr_score_HRD_SSA = ggplot(data = colData, aes(x = gmm_n3_cut, y = scoreSSA, fill = gmm_n3_cut)) +
geom_boxplot(show.legend = FALSE, notch = TRUE) +
stat_boxplot(geom='errorbar', linetype=1, width=0.5)+
xlab("HRD type") + stat_compare_means(comparisons = comparisons, method = 't.test')
bp_corr_score_HRD_HRRv2 = ggplot(data = colData, aes(x = gmm_n3_cut, y = scoreHRRv2, fill = gmm_n3_cut)) +
geom_boxplot(show.legend = FALSE, notch = TRUE) +
stat_boxplot(geom='errorbar', linetype=1, width=0.5)+
xlab("HRD type") + stat_compare_means(comparisons = comparisons, method = 't.test')
#print(bp_corr_score_HRD_HRR)
#print(bp_corr_score_HRD_CINSARC)
#print(bp_corr_score_HRD_MMEJ)
#print(bp_corr_score_HRD_SSA)
#print(bp_corr_score_HRD_HRRv2)
if (hrdgeneSigScore){
bp_corr_score_HRD_geneSig = ggplot(data = colData, aes(x = gmm_n3_cut, y = scorehrdgeneSig, fill = gmm_n3_cut)) +
geom_boxplot(show.legend = FALSE, notch = TRUE) +
stat_boxplot(geom='errorbar', linetype=1, width=0.5)+
xlab("HRD type") + stat_compare_means(comparisons = comparisons, method = 't.test')
#print(bp_corr_score_HRD_geneSig)
ggsave(paste('../RNAseq_',cancertype,'/figures/',cancertype,'_Significant_genes_n3.png', sep = ''),bp_corr_score_HRD_geneSig,width = 8.63, height = 5.71)
}
ggsave(paste('../RNAseq_',cancertype,'/figures/',cancertype,'_MMEJ_genes_n3.png', sep = ''),bp_corr_score_HRD_MMEJ,width = 8.63, height = 5.71)
ggsave(paste('../RNAseq_',cancertype,'/figures/',cancertype,'_SSA_genes_n3.png', sep = ''),bp_corr_score_HRD_SSA,width = 8.63, height = 5.71)
ggsave(paste('../RNAseq_',cancertype,'/figures/',cancertype,'_HRRv2_genes_n3.png', sep = ''),bp_corr_score_HRD_HRRv2,width = 8.63, height = 5.71)
ggsave(paste('../RNAseq_',cancertype,'/figures/',cancertype,'_HRR_genes_n3.png', sep = ''),bp_corr_score_HRD_HRR,width = 8.63, height = 5.71)
ggsave(paste('../RNAseq_',cancertype,'/figures/',cancertype,'_CINSARC_genes_n3.png', sep = ''),bp_corr_score_HRD_CINSARC,width = 8.63, height = 5.71)
}
createAll_heatmap_twoScores_v2 = function(dds, colData, mode, annot_mode, cancertype, hrdgeneSigScore, hrdgeneSig = list()){
## Function to create heatmaps which compares two geneset. All the genesets are compared with HRR_70. If possible the geneSigScore as well.
## Input:
## dds (dds object)
## colData (dataframe): Dataframe containg information per sample (rows are samples and the columns are features/information)
## mode (string; default is 'n2'): Indicates if only HRD-High and HRD-Low (mode = n2) or HRD-High,-Medium and -Low (mode ='n3) are compared
## annot_mode (string): Indicates if only high and low are annotated ('n2') or high, medium and low ('n3')
## cancertype (string): The cancertype has to be without the prefix like 'TCGA' or 'TARGET'
## geneSigScore (boolean): If true it means that this score is available and a boxplot can be created
## geneSig (list of strings): The list of significant genes (only needed if geneSigScore is TRUE), (default is an empty list)
heatmap_two_Scores(dds, colData, MMEJ$gene, 'MMEJ', hrdgenes$gene, 'HRR_70', mode, annot_mode, cancertype, save_heat = TRUE)
heatmap_two_Scores(dds, colData, SSA$gene, 'SSA', hrdgenes$gene, 'HRR_70', mode, annot_mode, cancertype, save_heat = TRUE)
heatmap_two_Scores(dds, colData, CINSARC$Genes.CINSARC, 'CINSARC', hrdgenes$gene, 'HRR_70', mode, annot_mode, cancertype, save_heat = TRUE)
heatmap_two_Scores(dds, colData, HRR$gene, 'HRRv2', hrdgenes$gene, 'HRR_70', mode, annot_mode, cancertype, save_heat = TRUE)
if (hrdgeneSigScore){
heatmap_two_Scores(dds, colData, hrdgeneSig, 'HRDgeneSign', hrdgenes$gene, 'HRR_70', mode, annot_mode, cancertype, save_heat = TRUE)
}
}
heatmap_allScores_v2 = function(colData, cancertype, mode, annot_mode, hrdgeneSigScore, save_heat = FALSE){
## Creates a heatmap comparing the different scores from the different genesets
## Input:
## colData (dataframe): Dataframe containg information per sample (rows are samples and the columns are features/information)
## cancertype (string): The cancertype has to be without the prefix like 'TCGA' or 'TARGET'
## mode (string; default is 'n2'): Indicates if only HRD-High and HRD-Low (mode = n2) or HRD-High,-Medium and -Low (mode ='n3) are compared
## annot_mode (string): Indicates if only high and low are annotated ('n2') or high, medium and low ('n3')
## geneSigScore (boolean): If true it means that this score is available and a boxplot can be created
## save_heat (boolean): Indicates if the heatmap should be saved (TRUE) or not (FALSE). (default is not saving it)
### Get the scores
if (hrdgeneSigScore){
colData_scores = colData[,c('scoreHRR','scoreCINSARC','scoreMMEJ','scoreSSA','scoreHRRv2','scoreHRDgeneSig')]
}else{
colData_scores = colData[,c('scoreHRR','scoreCINSARC','scoreMMEJ','scoreSSA','scoreHRRv2')]
}
colData_scores = t(colData_scores)
### Get teh types of the samples
if (mode == 'n2'){
hrdtypes = colData[match(colnames(colData_scores), rownames(colData)), "gmm_n2_cut"]
}else{
hrdtypes = colData[match(colnames(colData_scores), rownames(colData)), "gmm_n3_cut"]
}
colnames(colData_scores) = hrdtypes
heat = colData_scores
### Create the annotation
if (mode == 'n2'){
ha = HeatmapAnnotation(HRDtype = colnames(heat), col = list(HRDtype = c('High' = 'darkblue', 'Low' = 'lightblue')))
}
else{
ha = HeatmapAnnotation(HRDtype = colnames(heat), col = list(HRDtype = c('High' = 'darkblue', 'Medium' = 'green','Low' = 'orange')))
}
if (geneSigScore){
hm = Heatmap(heat,row_title_rot = 0,show_row_names = FALSE,row_split = factor(rownames(heat), levels = c('scoreHRR','scoreCINSARC','scoreMMEJ','scoreSSA','scoreHRRv2','scoreHRDgeneSig')),show_row_dend = FALSE,show_column_names = FALSE, row_names_gp = gpar(fontsize = 4), bottom_annotation = ha, column_km = 3, name = 'Score')
}else{
hm = Heatmap(heat,row_title_rot = 0,show_row_names = FALSE,row_split = factor(rownames(heat), levels = c('scoreHRR','scoreCINSARC','scoreMMEJ','scoreSSA','scoreHRRv2')),show_row_dend = FALSE,show_column_names = FALSE, row_names_gp = gpar(fontsize = 4), bottom_annotation = ha, column_km = 3, name = 'Score')
}
if (save_heat){
png(file=paste('../RNAseq_',cancertype,'/figures/heatmap_all_scores_',mode,'_annotated_',annot_mode, '.png', sep = ''))
}
draw(hm)
if (save_heat){
dev.off()
#ggsave(paste('../RNAseq_',cancertype,'/figures/heatmap_scores_',mode,'_annotated_',annot_mode, '.png', sep = ''),hm, width = 8.63, height = 5.71)
}
}
newScoreRunSingleCohort('TCGA-LUAD')
createHRDGeneSigScore = function(dds, colData, mode, cancertype, min_genes, save_genes = FALSE){
## Function which extracts the most significant genes and creates a new score.
## Returns the genes and the colData with the new score
## Input:
## dds (dds object)
## colData (dataframe): Dataframe containg information per sample (rows are samples and the columns are features/information)
## min_genes (int): Minimum number of genes needed for the score
## max_genes (int): Maximum number of genes used for the score
## Output
## results[1] (boolean): Indicates if a score was made
## results[2] (dataframe): Dataframe containg information per sample (rows are samples and the columns are features/information) with the new score
## results[3] (list of strings): List of the significant genes use for the score (only if results[1] is TRUE)
enough_genes = FALSE
if (mode == 'n2'){
res = results(dds, contrast = c('gmm_n2_cut', 'High', 'Low'), alpha = 0.05)
}else{
res = results(dds, contrast = c('gmm_n3_cut', 'High', 'Low'), alpha = 0.05)
}
res_df = as.data.frame(res)
res_df = subset(res_df, rownames(res_df) %in% hrdgenes$gene)
### Extract the most significant genes
genes_significant = subset(res_df, res_df$padj<=0.05 )
genes_significant = subset(genes_significant, genes_significant$log2FoldChange>=0.58 | genes_significant$log2FoldChange<= -0.58 )
genes_significant = genes_significant[order(genes_significant$padj),]
if (length(genes_significant) < min_genes){
return(list(enough_genes, colData))
}
enough_genes = TRUE
### Create the new score
norm_counts = counts(dds, normalized = TRUE)
norm_counts_geneSig = norm_counts[rownames(norm_counts) %in% gene_sign,]
z_scored_matrix_geneSig = t(apply(norm_counts_geneSig, 1, function(x) (x - mean(x)) / sd(x)))
sample_scores_geneSig = colSums(z_scored_matrix_geneSig)
colData$scoreHRDgeneSig = sample_scores_geneSig[rownames(colData)]
if (save_genes){
genes_df = as.dataframe(gene_sign)
write.csv(genes_df, paste('../RNAseq_',cancertype,'/results/hrd_significant_genes_',mode,'.csv', sep = ''), row.names = FALSE)
}
return(list(enough_genes, colData, gene_sign))
}
newScoreRunSingleCohort('TCGA-LUAD')
createHRDGeneSigScore = function(dds, colData, mode, cancertype, min_genes, save_genes = FALSE){
## Function which extracts the most significant genes and creates a new score.
## Returns the genes and the colData with the new score
## Input:
## dds (dds object)
## colData (dataframe): Dataframe containg information per sample (rows are samples and the columns are features/information)
## min_genes (int): Minimum number of genes needed for the score
## max_genes (int): Maximum number of genes used for the score
## Output
## results[1] (boolean): Indicates if a score was made
## results[2] (dataframe): Dataframe containg information per sample (rows are samples and the columns are features/information) with the new score
## results[3] (list of strings): List of the significant genes use for the score (only if results[1] is TRUE)
enough_genes = FALSE
if (mode == 'n2'){
res = results(dds, contrast = c('gmm_n2_cut', 'High', 'Low'), alpha = 0.05)
}else{
res = results(dds, contrast = c('gmm_n3_cut', 'High', 'Low'), alpha = 0.05)
}
res_df = as.data.frame(res)
res_df = subset(res_df, rownames(res_df) %in% hrdgenes$gene)
### Extract the most significant genes
genes_significant = subset(res_df, res_df$padj<=0.05 )
genes_significant = subset(genes_significant, genes_significant$log2FoldChange>=0.58 | genes_significant$log2FoldChange<= -0.58 )
genes_significant = genes_significant[order(genes_significant$padj),]
if (length(genes_significant) < min_genes){
return(list(enough_genes, colData))
}
enough_genes = TRUE
### Create the new score
norm_counts = counts(dds, normalized = TRUE)
norm_counts_geneSig = norm_counts[rownames(norm_counts) %in% genes_significant,]
z_scored_matrix_geneSig = t(apply(norm_counts_geneSig, 1, function(x) (x - mean(x)) / sd(x)))
sample_scores_geneSig = colSums(z_scored_matrix_geneSig)
colData$scoreHRDgeneSig = sample_scores_geneSig[rownames(colData)]
if (save_genes){
genes_df = as.dataframe(gene_sign)
write.csv(genes_df, paste('../RNAseq_',cancertype,'/results/hrd_significant_genes_',mode,'.csv', sep = ''), row.names = FALSE)
}
return(list(enough_genes, colData, gene_sign))
}
createHRDGeneSigScore = function(dds, colData, mode, cancertype, min_genes, save_genes = FALSE){
## Function which extracts the most significant genes and creates a new score.
## Returns the genes and the colData with the new score
## Input:
## dds (dds object)
## colData (dataframe): Dataframe containg information per sample (rows are samples and the columns are features/information)
## min_genes (int): Minimum number of genes needed for the score
## max_genes (int): Maximum number of genes used for the score
## Output
## results[1] (boolean): Indicates if a score was made
## results[2] (dataframe): Dataframe containg information per sample (rows are samples and the columns are features/information) with the new score
## results[3] (list of strings): List of the significant genes use for the score (only if results[1] is TRUE)
enough_genes = FALSE
if (mode == 'n2'){
res = results(dds, contrast = c('gmm_n2_cut', 'High', 'Low'), alpha = 0.05)
}else{
res = results(dds, contrast = c('gmm_n3_cut', 'High', 'Low'), alpha = 0.05)
}
res_df = as.data.frame(res)
res_df = subset(res_df, rownames(res_df) %in% hrdgenes$gene)
### Extract the most significant genes
genes_significant = subset(res_df, res_df$padj<=0.05 )
genes_significant = subset(genes_significant, genes_significant$log2FoldChange>=0.58 | genes_significant$log2FoldChange<= -0.58 )
genes_significant = genes_significant[order(genes_significant$padj),]
if (length(genes_significant) < min_genes){
return(list(enough_genes, colData))
}
enough_genes = TRUE
### Create the new score
norm_counts = counts(dds, normalized = TRUE)
norm_counts_geneSig = norm_counts[rownames(norm_counts) %in% genes_significant,]
z_scored_matrix_geneSig = t(apply(norm_counts_geneSig, 1, function(x) (x - mean(x)) / sd(x)))
sample_scores_geneSig = colSums(z_scored_matrix_geneSig)
colData$scoreHRDgeneSig = sample_scores_geneSig[rownames(colData)]
if (save_genes){
genes_df = as.dataframe(genes_significant)
write.csv(genes_df, paste('../RNAseq_',cancertype,'/results/hrd_significant_genes_',mode,'.csv', sep = ''), row.names = FALSE)
}
return(list(enough_genes, colData, gene_sign))
}
newScoreRunSingleCohort('TCGA-LUAD')
createHRDGeneSigScore = function(dds, colData, mode, cancertype, min_genes, save_genes = FALSE){
## Function which extracts the most significant genes and creates a new score.
## Returns the genes and the colData with the new score
## Input:
## dds (dds object)
## colData (dataframe): Dataframe containg information per sample (rows are samples and the columns are features/information)
## min_genes (int): Minimum number of genes needed for the score
## max_genes (int): Maximum number of genes used for the score
## Output
## results[1] (boolean): Indicates if a score was made
## results[2] (dataframe): Dataframe containg information per sample (rows are samples and the columns are features/information) with the new score
## results[3] (list of strings): List of the significant genes use for the score (only if results[1] is TRUE)
enough_genes = FALSE
if (mode == 'n2'){
res = results(dds, contrast = c('gmm_n2_cut', 'High', 'Low'), alpha = 0.05)
}else{
res = results(dds, contrast = c('gmm_n3_cut', 'High', 'Low'), alpha = 0.05)
}
res_df = as.data.frame(res)
res_df = subset(res_df, rownames(res_df) %in% hrdgenes$gene)
### Extract the most significant genes
genes_significant = subset(res_df, res_df$padj<=0.05 )
genes_significant = subset(genes_significant, genes_significant$log2FoldChange>=0.58 | genes_significant$log2FoldChange<= -0.58 )
genes_significant = genes_significant[order(genes_significant$padj),]
if (length(genes_significant) < min_genes){
return(list(enough_genes, colData))
}
enough_genes = TRUE
### Create the new score
norm_counts = counts(dds, normalized = TRUE)
norm_counts_geneSig = norm_counts[rownames(norm_counts) %in% genes_significant,]
z_scored_matrix_geneSig = t(apply(norm_counts_geneSig, 1, function(x) (x - mean(x)) / sd(x)))
sample_scores_geneSig = colSums(z_scored_matrix_geneSig)
colData$scoreHRDgeneSig = sample_scores_geneSig[rownames(colData)]
if (save_genes){
genes_df = as.data.frame(genes_significant)
write.csv(genes_df, paste('../RNAseq_',cancertype,'/results/hrd_significant_genes_',mode,'.csv', sep = ''), row.names = FALSE)
}
newScoreRunSingleCohort('TCGA-LUAD')
newScoreRunSingleCohort('TCGA-LUAD')
createHRDGeneSigScore = function(dds, colData, mode, cancertype, min_genes, save_genes = FALSE){
## Function which extracts the most significant genes and creates a new score.
## Returns the genes and the colData with the new score
## Input:
## dds (dds object)
## colData (dataframe): Dataframe containg information per sample (rows are samples and the columns are features/information)
## min_genes (int): Minimum number of genes needed for the score
## max_genes (int): Maximum number of genes used for the score
## Output
## results[1] (boolean): Indicates if a score was made
## results[2] (dataframe): Dataframe containg information per sample (rows are samples and the columns are features/information) with the new score
## results[3] (list of strings): List of the significant genes use for the score (only if results[1] is TRUE)
enough_genes = FALSE
if (mode == 'n2'){
res = results(dds, contrast = c('gmm_n2_cut', 'High', 'Low'), alpha = 0.05)
}else{
res = results(dds, contrast = c('gmm_n3_cut', 'High', 'Low'), alpha = 0.05)
}
res_df = as.data.frame(res)
res_df = subset(res_df, rownames(res_df) %in% hrdgenes$gene)
### Extract the most significant genes
genes_significant = subset(res_df, res_df$padj<=0.05 )
genes_significant = subset(genes_significant, genes_significant$log2FoldChange>=0.58 | genes_significant$log2FoldChange<= -0.58 )
genes_significant = genes_significant[order(genes_significant$padj),]
if (length(genes_significant) < min_genes){
return(list(enough_genes, colData))
}
enough_genes = TRUE
### Create the new score
norm_counts = counts(dds, normalized = TRUE)
norm_counts_geneSig = norm_counts[rownames(norm_counts) %in% genes_significant,]
z_scored_matrix_geneSig = t(apply(norm_counts_geneSig, 1, function(x) (x - mean(x)) / sd(x)))
sample_scores_geneSig = colSums(z_scored_matrix_geneSig)
colData$scoreHRDgeneSig = sample_scores_geneSig[rownames(colData)]
if (save_genes){
genes_df = as.data.frame(genes_significant)
write.csv(genes_df, paste('../RNAseq_',cancertype,'/results/hrd_significant_genes_',mode,'.csv', sep = ''), row.names = FALSE)
}
return(list(enough_genes, colData, gene_sign))
}
newScoreRunSingleCohort('TCGA-LUAD')
#### RUN Pipeline
gmm_results = read.csv('../../GMM_Cutoff/data/gmm_cutoffs_pancancer.csv', sep = ',', row.names = 1)
